import streamlit as st
import pandas as pd
import numpy as np

def render_trade_summary(trades_df):
    """ÂèñÂºïÁµ±Ë®à„Çµ„Éû„É™„Éº„ÇíË°®Á§∫"""
    if trades_df.empty:
        st.warning("ÂèñÂºï„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
        return
    
    # Âü∫Êú¨Áµ±Ë®àË®àÁÆó
    total_trades = len(trades_df)
    winning_trades = len(trades_df[trades_df['profit_loss'] > 0])
    losing_trades = len(trades_df[trades_df['profit_loss'] < 0])
    win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
    
    total_profit_loss = trades_df['profit_loss'].sum()
    avg_profit_loss = trades_df['profit_loss'].mean()
    
    max_profit = trades_df['profit_loss'].max()
    max_loss = trades_df['profit_loss'].min()
    
    # Âà©ÁõäÂõ†Â≠êË®àÁÆó
    total_profit = trades_df[trades_df['profit_loss'] > 0]['profit_loss'].sum()
    total_loss = abs(trades_df[trades_df['profit_loss'] < 0]['profit_loss'].sum())
    profit_factor = total_profit / total_loss if total_loss > 0 else float('inf')
    
    # Âãù„Å°Ë≤†„ÅëÂèñÂºï„ÅÆÂπ≥Âùá
    avg_winning_profit = trades_df[trades_df['profit_loss'] > 0]['profit_loss'].mean() if winning_trades > 0 else 0
    avg_losing_loss = trades_df[trades_df['profit_loss'] < 0]['profit_loss'].mean() if losing_trades > 0 else 0
    
    # ÈÄ£ÂãùÈÄ£ÊïóË®àÁÆó
    consecutive_wins, consecutive_losses = calculate_consecutive_trades(trades_df)
    
    # Âπ≥Âùá‰øùÊúâÊúüÈñì
    avg_duration = trades_df['duration_days'].mean() if 'duration_days' in trades_df.columns else 0
    max_duration = trades_df['duration_days'].max() if 'duration_days' in trades_df.columns else 0
    min_duration = trades_df['duration_days'].min() if 'duration_days' in trades_df.columns else 0
    
    # Ê±∫Ê∏àÁêÜÁî±Âà•Áµ±Ë®à
    exit_reason_stats = trades_df['exit_reason'].value_counts()
    
    # „Éà„É¨„É≥„ÉâÂà•Áµ±Ë®à
    trend_stats = trades_df['entry_trend'].value_counts() if 'entry_trend' in trades_df.columns else pd.Series()
    
    # Ë°®Á§∫
    st.markdown("## üìä ÂèñÂºïÁµ±Ë®à„Çµ„Éû„É™„Éº")
    
    # ÊúÄÈáçË¶ÅÊÉÖÂ†±Ôºà2Ë°å„ÅßË°®Á§∫Ôºâ
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("ÂèñÂºïÂõûÊï∞", f"{total_trades:,}Âõû")
    
    with col2:
        st.metric("ÂãùÁéá", f"{win_rate:.1f}%")
    
    with col3:
        profit_color = "green" if total_profit_loss > 0 else "red"
        st.metric("ÊúÄÁµÇÂà©Áõä", f"{total_profit_loss:,.0f}ÂÜÜ")
    
    with col4:
        st.metric("Âπ≥ÂùáÊêçÁõä", f"{avg_profit_loss:,.0f}ÂÜÜ")
    
    # „É™„Çπ„ÇØ„ÉªË©≥Á¥∞Áµ±Ë®àÔºà2Ë°å„ÅßË°®Á§∫Ôºâ
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("ÊúÄÂ§ßÂà©Áõä", f"{max_profit:,.0f}ÂÜÜ")
    
    with col2:
        st.metric("ÊúÄÂ§ßÊêçÂ§±", f"{max_loss:,.0f}ÂÜÜ")
    
    with col3:
        st.metric("Âà©ÁõäÂõ†Â≠ê", f"{profit_factor:.2f}")
    
    with col4:
        st.metric("Âπ≥Âùá‰øùÊúâÊúüÈñì", f"{avg_duration:.1f}Êó•")
    
    # ÂãùÊïóË©≥Á¥∞Ôºà2Ë°å„ÅßË°®Á§∫Ôºâ
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Âãù„Å°ÂèñÂºïÂπ≥Âùá", f"{avg_winning_profit:,.0f}ÂÜÜ")
    
    with col2:
        st.metric("Ë≤†„ÅëÂèñÂºïÂπ≥Âùá", f"{avg_losing_loss:,.0f}ÂÜÜ")
    
    with col3:
        st.metric("ÊúÄÂ§ßÈÄ£Âãù", f"{consecutive_wins}Âõû")
    
    with col4:
        st.metric("ÊúÄÂ§ßÈÄ£Êïó", f"{consecutive_losses}Âõû")
    


def calculate_consecutive_trades(trades_df):
    """ÈÄ£ÂãùÈÄ£Êïó„ÇíË®àÁÆó"""
    if trades_df.empty:
        return 0, 0
    
    # ÊêçÁõä„ÅÆÁ¨¶Âè∑„ÇíÂèñÂæó
    profits = trades_df['profit_loss'].values
    signs = np.sign(profits)
    
    max_consecutive_wins = 0
    max_consecutive_losses = 0
    current_wins = 0
    current_losses = 0
    
    for sign in signs:
        if sign > 0:  # Âãù„Å°
            current_wins += 1
            current_losses = 0
            max_consecutive_wins = max(max_consecutive_wins, current_wins)
        elif sign < 0:  # Ë≤†„Åë
            current_losses += 1
            current_wins = 0
            max_consecutive_losses = max(max_consecutive_losses, current_losses)
    
    return max_consecutive_wins, max_consecutive_losses 